name: Release ExpenseLens
run-name: Release ExpenseLens to ${{ inputs.environment }} by ${{ github.actor }}
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Which environment do you want to deploy to?'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

permissions:
  id-token: write
  contents: write

jobs:
  prepare-variables:
    runs-on: ubuntu-latest
    name: Prepare required variables
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    outputs:
      deployment_environment: ${{ inputs.environment }}
      new_version: ${{ steps.extract_tag.outputs.version }}
    steps:
      # github.ref will be 'refs/tags/v0.0.x, we want the v0.0.x
      - name: Extract version from tag
        run: |
          echo "version=${GITHUB_REF##*/v}" >> "$GITHUB_OUTPUT"
          echo "The version is ${GITHUB_REF##*/v}"
        id: extract_tag

  deploy-pulumi:
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare-variables.outputs.deployment_environment }}
    name: Deploy ExpenseLens Pulumi
    needs: [prepare-variables]
    defaults:
      run:
        shell: bash
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4

      - name: OIDC Login to Azure Public Cloud with AzPowershell (enableAzPSSession true)
        uses: azure/login@v2.1.1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - uses: pulumi/actions@v5.2.3
        name: Deploy infrastructure to development
        env:
          : ${{ needs.prepare-variables.outputs.new_version }}
          AZURE_STORAGE_ACCOUNT: ${{ secrets.PULUMI_AZURE_STORAGE_ACCOUNT }}
          AZURE_STORAGE_KEY: ${{ secrets.PULUMI_AZURE_STORAGE_KEY }}
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        with:
          command: up
          stack-name: organization/DeployExpenseLens/development
          work-dir: deploy/ExpenseLens
          cloud-url: azblob://development
          suppress-outputs: true
          suppress-progress: true

  build-and-deploy-function:
    runs-on: windows-latest
    environment: ${{ needs.prepare-variables.outputs.deployment_environment }}
    needs: [prepare-variables, deploy-pulumi]
    name: Deploy to FunctionApp ${{ vars.AZURE_FUNCTIONAPP_NAME }}
    env:
      AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'       # set this to the path to your function app project, defaults to the repository root
      DOTNET_VERSION: '8.0.x'                   # set this to the dotnet version to use (e.g. '2.1.x', '3.1.x', '5.0.x')
    #    if: ${{ vars.AZURE_FUNCTIONAPP_NAME != '' }}
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 'Resolve Project Dependencies Using Dotnet'
        shell: pwsh
        run: |
          pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          dotnet build src/Functions/Functions.csproj --configuration Release --output ./Publish
          popd

      - name: 'Run Azure Functions Action'
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: ${{ vars.AZURE_FUNCTIONAPP_NAME }}
          package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/Publish'
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

